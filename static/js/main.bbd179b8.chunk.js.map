{"version":3,"sources":["components/Header/index.js","services/api.js","pages/main/index.js","pages/mainChat/index.js","pages/home/index.js","pages/botInfo/index.js","pages/chatInfo/index.js","pages/messageInfo/index.js","pages/createMessage/index.js","pages/createBot/index.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","id","className","href","api","axios","create","baseURL","Main","state","bots","docInfo","page","loadBots","_callee","response","_response$data","docs","_args","arguments","regenerator_default","wrap","_context","prev","next","length","undefined","get","concat","sent","console","log","data","Object","objectWithoutProperties","_this","setState","stop","nextPage","_this$state","pages","pageNumber","prevPage","_this$state2","this","delete","then","alert","window","location","reload","catch","error","_this2","_this$state3","react_router_dom","to","map","bot","key","_id","name","createdAt","onClick","deleteBot","disabled","Component","MainChat","messages","loadMessages","chatId","body","sender","Home","BotInfo","props","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","newName","handleChange","bind","assertThisInitialized","send","match","params","event","put","header","Content-Type","preventDefault","target","value","onSubmit","type","onChange","ChatInfo","MessageInfo","message","CreateMessage","post","history","push","defineProperty","CreateBot","Routes","react_router","exact","path","component","App","basename","components_Header","routes","Boolean","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bbd179b8.chunk.js","sourcesContent":["import React from 'react'\r\nimport './styles.css'\r\nimport { Link } from 'react-router-dom'\r\nconst Header = () =>(\r\n\t<header id=\"main-header\">\r\n\t\t<a className='logo' href='/'>BotApp</a>\r\n\t\t<div>\r\n\t\t\t<a className='resto' href='/bots'>Bots</a>\r\n\t\t\t<a className='resto' href='/chats'>Chats</a>\r\n\t\t</div>\r\n\r\n\r\n\t</header>\r\n)\r\n\r\nexport default Header","import axios from 'axios'\r\n\r\nconst api = axios.create({ baseURL: 'https://sabion-challenge-one.herokuapp.com/api' })\r\n\r\nexport default api","import React, { Component } from 'react';\r\nimport api from '../../services/api'\r\nimport './styles.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default class Main extends Component {\r\n\t//save values from DB \r\n\tstate = {\r\n\t\tbots: [],\r\n\t\tdocInfo: {},\r\n\t\tpage: 1,\r\n\r\n\t}\r\n\r\n\t//Load that values\r\n\tcomponentDidMount(){\r\n\t\tthis.loadBots()\r\n\t}\r\n\r\n\t//Fuction used to load bot informations. note that we call docs in the data because we used\r\n\t//pagination in the api.\r\n\tloadBots = async (page = 1) => {\r\n\t\tconst response = await api.get(`/bots?page=${page}`)\r\n\t\tconsole.log(response.data)\r\n\t\tconst {docs, ...docInfo } = response.data \r\n\t\tthis.setState({bots: docs, docInfo, page})\r\n\t}\r\n\r\n\t//Function used to go to next page * Same idea! Do nothing when the users are in the last page\r\n\tnextPage = () =>{\r\n\t\tconst { page, docInfo} = this.state;\r\n\r\n\t\tif(page=== docInfo.pages) return\r\n\r\n\t\tconst pageNumber = page + 1;\r\n\r\n\t\tthis.loadBots(pageNumber)\r\n\t}\r\n\t\r\n\t//Function used to go to previous page *Do nothing when the users are in the first page\r\n\tprevPage = () =>{\r\n\t\tconst { page, docInfo} = this.state;\r\n\r\n\t\tif(page=== 1) return\r\n\r\n\t\tconst pageNumber = page -1;\r\n\r\n\t\tthis.loadBots(pageNumber)\r\n\t}\r\n\r\n\tdeleteBot(id){\r\n\t\tapi.delete(`/bots/${id}`).then(response =>{\r\n\t\t    \talert('Bot deletado com sucesso')\r\n\t\t    \twindow.location.reload();\r\n\t\t    }).catch(function(error) {\r\n            \talert('Opa, um erro ocorreu... Estamos Trabalhando nisso!')\r\n            \tconsole.log(error);\r\n            })\r\n\t\t}\r\n\t\t\r\n\t\r\n\r\n\r\n\r\n\trender(){\r\n\t\tconst { bots, page, docInfo } = this.state\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div className=\"bots-list\">\r\n\t\t\t\t<article> \r\n\t\t\t\t\t<Link to={'/createBot'}> Criar um novo Bot </Link>\r\n\t\t\t\t</article>\r\n\t\t\t\t{bots.map(bot =>(\r\n\t\t\t\t\t<article key={bot._id}>\r\n\t\t\t\t\t\t<strong>{bot.name}</strong>\r\n\t\t\t\t\t\t<p>Criado em {bot.createdAt}</p>\r\n\t\t\t\t\t\t<Link to={`/bots/${bot._id}`}> Editar </Link>\r\n\t\t\t\t\t\t<button onClick={() => { this.deleteBot(bot._id) }}>\r\n\t\t\t\t\t\t\tDeletar\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</article>\r\n\r\n\t\t\t\t))}\r\n\r\n\t\t\t\t<div className=\"actions\">\r\n\t\t\t\t\t<button disabled={page === 1} onClick={this.prevPage}>\r\n\t\t\t\t\t\tAnterior\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button disabled={page === docInfo.pages} onClick={this.nextPage}>\r\n\t\t\t\t\t\tPróximo\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}","import React, { Component } from 'react';\r\nimport api from '../../services/api'\r\nimport './styles.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default class MainChat extends Component {\r\n\t\r\n\r\n\r\n\tstate = {\r\n\t\tmessages: [],\r\n\t\tdocInfo: {},\r\n\t\tpage: 1,\r\n\r\n\t}\r\n\r\n\t//Load that values\r\n\tcomponentDidMount(){\r\n\t\tthis.loadMessages()\r\n\t}\r\n\r\n\t//Fuction used to load all messages informations. note that we call docs in the data because we used\r\n\t//pagination in the api.\r\n\tloadMessages = async (page = 1) => {\r\n\t\tconst response = await api.get(`/messages?page=${page}`)\r\n\t\tconsole.log(response.data)\r\n\t\tconst {docs, ...docInfo } = response.data \r\n\t\tthis.setState({messages: docs, docInfo, page})\r\n\t}\r\n\r\n\t//Function used to go to next page * Same idea! Do nothing when the users are in the last page\r\n\tnextPage = () =>{\r\n\t\tconst { page, docInfo} = this.state;\r\n\r\n\t\tif(page=== docInfo.pages) return\r\n\r\n\t\tconst pageNumber = page + 1;\r\n\r\n\t\tthis.loadMessages(pageNumber)\r\n\t}\r\n\t\r\n\t//Function used to go to previous page *Do nothing when the users are in the first page\r\n\tprevPage = () =>{\r\n\t\tconst { page, docInfo} = this.state;\r\n\r\n\t\tif(page=== 1) return\r\n\r\n\t\tconst pageNumber = page -1;\r\n\r\n\t\tthis.loadMessages(pageNumber)\r\n\t}\r\n\r\n\r\n\r\n\trender(){\r\n\t\tconst { messages, page, docInfo } = this.state\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div className=\"messages-list\">\r\n\t\t\t\t<article> \r\n\t\t\t\t\t<Link to={`/createMessage`}> Registrar uma nova mensagem </Link>\r\n\t\t\t\t</article>\r\n\t\t\t\t{messages.map(messages =>(\r\n\t\t\t\t\t<article key={messages._id}>\r\n\t\t\t\t\t\t<strong>Conversa: {messages.chatId}</strong>\r\n\t\t\t\t\t\t<p>Corpo da mensagem: {messages.body}</p>\r\n\t\t\t\t\t\t<p>Remetente: {messages.sender}</p>\r\n\t\t\t\t\t\t<p>Enviada em {messages.createdAt}</p>\r\n\t\t\t\t\t\t<Link to={`/messages/${messages._id}`}> Ver Apenas essa mensagem </Link>\r\n\t\t\t\t\t\t<Link to={`/chats/${messages.chatId}`}> Ver todas as mensagens desta Conversa </Link>\r\n\t\t\t\t\t</article>\r\n\t\t\t\t))}\r\n\r\n\t\t\t\t<div className=\"actions\">\r\n\t\t\t\t\t<button disabled={page === 1} onClick={this.prevPage}>\r\n\t\t\t\t\t\tAnterior\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button disabled={page === docInfo.pages} onClick={this.nextPage}>\r\n\t\t\t\t\t\tPróximo\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}","import React, { Component } from 'react'\r\nimport api from '../../services/api'\r\nimport './styles.css'\r\nexport default class Home extends Component{\r\n\r\n\trender(){\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div className='home'>\r\n\t\t\t\t<h3>Clique em Bots para utilizar as funções de Bot</h3>\r\n\t\t\t\t<h3>Clique em Chats para utilizar as funções de conversa e mensagem</h3>\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport api from '../../services/api'\r\nimport './styles.css'\r\nexport default class BotInfo extends Component{\r\n\t\r\n\tconstructor(props) {\r\n\t    super(props);\r\n\t    this.state = { bot: {},\r\n\t\t \tnewName: ''};\r\n\r\n\t    this.handleChange = this.handleChange.bind(this);\r\n\t    this.send = this.send.bind(this);\r\n  \t}\r\n\r\n\r\n\r\n\t\r\n\r\n\tasync componentDidMount(){\r\n\t\tconst {id} = this.props.match.params\r\n\r\n\t\tconst response =  await api.get('/bots/'+id)\r\n\r\n\t\tthis.setState({ bot: response.data})\r\n\t}\r\n\r\n\tsend(event) {\r\n\t\tif(this.state.newName !==''){\r\n\t\t\tconst {id} = this.props.match.params\r\n\t\t    api.put('/bots/'+id,{name:this.state.newName},{header:{'Content-Type':'aplication/json'}}).then(response =>{\r\n\t\t    \tconsole.log(response)\r\n\t\t    })\r\n\t\t    event.preventDefault();\r\n\t\t    this.setState({bot:{name:this.state.newName}})\r\n\t    }else{\r\n\t    \talert('O campo novo nome não pode estar vazio')\r\n\t    }\r\n  \t}\r\n\r\n  \thandleChange(event) {\r\n    \tthis.setState({newName: event.target.value});\r\n  \t}\r\n\r\n\trender(){\r\n\t\tconst { bot } = this.state\r\n\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div className=\"bot-info\">\r\n\t\t\t\t<form onSubmit={this.send}>\r\n\t\t\t\t\t<span> Nome atual: <strong>{bot.name}</strong></span>\r\n\t\t\t\t\t<p> Qual será o novo nome? </p>\r\n\t\t\t\t\t<input className='text-area' type='text' value={bot.newName} onChange={this.handleChange} />\r\n\t\t\t\t\t<input className type=\"submit\" value=\"Salvar\" />\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport api from '../../services/api'\r\nimport './styles.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default class ChatInfo extends Component {\r\n\r\n\tstate = {\r\n\t\tmessages: [],\r\n\t\tdocInfo: {},\r\n\t\tpage: 1,\r\n\r\n\t}\r\n\r\n\t//Load that values\r\n\tcomponentDidMount(){\r\n\t\tthis.loadMessages()\r\n\t}\r\n\r\n\t//Fuction used to load chat informations. note that we call docs in the data because we used\r\n\t//pagination in the api.\r\n\tloadMessages = async (page = 1) => {\r\n\t\tconst {id} = this.props.match.params\r\n\t\tconst response = await api.get(`/messages/chat/${id}?page=${page}`)\r\n\t\tconsole.log(response.data)\r\n\t\tconst {docs, ...docInfo } = response.data \r\n\t\tthis.setState({messages: docs, docInfo, page})\r\n\t}\r\n\r\n\t//Function used to go to next page * Same idea! Do nothing when the users are in the last page\r\n\tnextPage = () =>{\r\n\t\tconst { page, docInfo} = this.state;\r\n\r\n\t\tif(page=== docInfo.pages) return\r\n\r\n\t\tconst pageNumber = page + 1;\r\n\r\n\t\tthis.loadMessages(pageNumber)\r\n\t}\r\n\t\r\n\t//Function used to go to previous page *Do nothing when the users are in the first page\r\n\tprevPage = () =>{\r\n\t\tconst { page, docInfo} = this.state;\r\n\r\n\t\tif(page=== 1) return\r\n\r\n\t\tconst pageNumber = page -1;\r\n\r\n\t\tthis.loadMessages(pageNumber)\r\n\t}\r\n\r\n\r\n\r\n\trender(){\r\n\t\tconst { messages, page, docInfo } = this.state\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div className=\"messages-list\">\r\n\t\t\t\t{messages.map(messages =>(\r\n\t\t\t\t\t<article key={messages._id}>\r\n\t\t\t\t\t\t<strong>Conversa: {messages.chatId}</strong>\r\n\t\t\t\t\t\t<p>Corpo da mensagem: {messages.body}</p>\r\n\t\t\t\t\t\t<p>Remetente: {messages.sender}</p>\r\n\t\t\t\t\t\t<p>Enviada em {messages.createdAt}</p>\r\n\t\t\t\t\t\t<Link to={`/messages/${messages._id}`}> Ver Apenas essa mensagem </Link>\r\n\t\t\t\t\t\t<Link to={`/chat/${messages.chatId}`}> Ver todas as mensagens desta Conversa </Link>\r\n\t\t\t\t\t</article>\r\n\t\t\t\t))}\r\n\r\n\t\t\t\t<div className=\"actions\">\r\n\t\t\t\t\t<button disabled={page === 1} onClick={this.prevPage}>\r\n\t\t\t\t\t\tAnterior\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button disabled={page === docInfo.pages} onClick={this.nextPage}>\r\n\t\t\t\t\t\tPróximo\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}","import React, { Component } from 'react'\r\nimport api from '../../services/api'\r\nimport './styles.css'\r\nexport default class MessageInfo extends Component{\r\n\t\r\n\tstate = { \r\n\t\tmessage: {}\r\n\t}\r\n\r\n\r\n\r\n\t\r\n\r\n\tasync componentDidMount(){\r\n\t\tconst {id} = this.props.match.params\r\n\r\n\t\tconst response =  await api.get('/messages/'+id)\r\n\t\t\r\n\t\tthis.setState({ message: response.data})\r\n\t}\r\n\r\n\r\n\r\n\trender(){\r\n\t\tconst { message } = this.state\r\n\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div className=\"message-info\">\r\n\t\t\t\t<article>\r\n\t\t\t\t\t<strong> ID: {message._id}</strong>\r\n\t\t\t\t\t<p>Corpo da Mensagem: {message.body}</p>\r\n\t\t\t\t\t<p>Remetente: {message.sender}</p>\t\r\n\t\t\t\t\t<p>Enviada em: {message.createdAt}</p>\r\n\t\t\t\t</article>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport api from '../../services/api'\r\nimport './styles.css'\r\nexport default class CreateMessage extends Component{\r\n\t\r\n\tconstructor(props) {\r\n\t    super(props);\r\n\t    this.state = { \r\n\t    \tbody: '',\r\n\t\t \tchatId: '',\r\n\t\t \tsender: '',\r\n\t\t }\r\n\r\n\t    this.handleChange = this.handleChange.bind(this);\r\n\t    this.send = this.send.bind(this);\r\n  \t}\r\n\r\n\tsend(event) {\r\n\t\tif(this.state.body !==''&&this.state.chatId !==''&&this.state.sender !==''){\r\n\t\t\t \r\n\t\t    api.post('/messages',{body:this.state.body, chatId:this.state.chatId, sender:this.state.sender },{header:{'Content-Type':'aplication/json'}}).then(response =>{\r\n\t\t    \tconsole.log(response)\r\n\t\t    })\r\n\t\t    event.preventDefault();\r\n\t\t    this.props.history.push('/chats')\r\n\r\n\t    }else{\r\n\t    \talert('Nenhum campo pode estar vazio')\r\n\t    }\r\n  \t}\r\n\r\n  \thandleChange(event) {\r\n    \tthis.setState({ [event.target.name]: event.target.value });\r\n    \t\r\n  \t}\r\n  \t\r\n\r\n\trender(){\r\n\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div className=\"message-create\">\r\n\t\t\t\t<form onSubmit={this.send}>\r\n\t\t\t\t\t<strong>Preencha todos os campos</strong>\r\n\t\t\t\t\t<p>ID conversa </p>\r\n\t\t\t\t\t\t<input className='text-area' type='text' name='chatId' value={this.state.chatId} onChange={this.handleChange} />\r\n\t\t\t\t\t<p>Remetente </p>\r\n\t\t\t\t\t\t<input className='text-area' type='text' name='sender' value={this.state.sender} onChange={this.handleChange} />\r\n\t\t\t\t\t<p>Mensagem </p>\r\n\t\t\t\t\t\t<input className='text-area' type='text' name='body' value={this.state.body} onChange={this.handleChange} />\r\n\t\t\t\t\t\r\n\t\t\t\t\t<input  type=\"submit\" value=\"Salvar\" />\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport api from '../../services/api'\r\nimport './styles.css'\r\nexport default class CreateBot extends Component{\r\n\t\r\n\tconstructor(props) {\r\n\t    super(props);\r\n\t    this.state = { \r\n\t    \tname: '',\r\n\t\t }\r\n\r\n\t    this.handleChange = this.handleChange.bind(this);\r\n\t    this.send = this.send.bind(this);\r\n  \t}\r\n\r\n\tsend(event) {\r\n\t\tif(this.state.name !==''){\r\n\t\t\t \r\n\t\t    api.post('/bots',{name:this.state.name },{header:{'Content-Type':'aplication/json'}}).then(response =>{\r\n\t\t    \tconsole.log(response)\r\n\t\t    })\r\n\t\t    event.preventDefault();\r\n\t\t    this.props.history.push('/bots')\r\n\r\n\t    }else{\r\n\t    \talert('Insira um nome para o Bot')\r\n\t    }\r\n  \t}\r\n\r\n  \thandleChange(event) {\r\n    \tthis.setState({ [event.target.name]: event.target.value });\r\n    \t\r\n  \t}\r\n  \t\r\n\r\n\trender(){\r\n\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div className=\"bot-create\">\r\n\t\t\t\t<form onSubmit={this.send}>\r\n\t\t\t\t\t<strong>Qual será o nome do Bot?</strong>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<p>Nome </p>\r\n\t\t\t\t\t\t<input className='text-area' type='text' name='name' value={this.state.name} onChange={this.handleChange} />\r\n\t\t\t\t\t\r\n\t\t\t\t\t<input  type=\"submit\" value=\"Salvar\" />\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n","import React from 'react'\r\n\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\r\n\r\nimport Main from'./pages/main'\r\nimport MainChat from'./pages/mainChat'\r\nimport Home from'./pages/home'\r\nimport BotInfo from'./pages/botInfo'\r\nimport ChatInfo from'./pages/chatInfo'\r\nimport MessageInfo from './pages/messageInfo'\r\nimport CreateMessage from './pages/createMessage'\r\nimport CreateBot from './pages/createBot'\r\n\r\nconst Routes = () => (\r\n\t<BrowserRouter>\r\n\t\t<Switch>\r\n\t\t\t<Route exact path='/' component={Home} />\r\n\t\t\t<Route exact path='/bots' component={Main} />\r\n\t\t\t<Route path='/bots/:id' component={BotInfo} />\r\n\t\t\t<Route exact path='/chats' component={MainChat} />\r\n\t\t\t<Route path='/chats/:id' component={ChatInfo} />\r\n\t\t\t<Route path='/messages/:id' component={MessageInfo} />\r\n\t\t\t<Route path='/createMessage' component={CreateMessage} />\r\n\t\t\t<Route path='/createBot' component={CreateBot} />\r\n\t\t</Switch>\r\n\t</BrowserRouter>\r\n)\r\n\r\nexport default Routes;","import React from 'react'\nimport Header from './components/Header'\nimport './styles.css'\nimport Main from './pages/main'\nimport Routes from './routes'\nimport { HashRouter, Route, Link } from \"react-router-dom\";\nconst App = () =>{\n  return (\n  \t<HashRouter basename='/'>\n\t    <div className=\"App\">\n\t        <Header />\n\t        <Routes />\n\t    </div>\n    </HashRouter>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}